version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          when: on_fail
          command: |
            # Your code here
            if aws s3 ls | grep udapeople-<< parameters.workflow_id >>; then
              echo "Destroying environment: << parameters.workflow_id >> "
              aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: << parameters.workflow_id >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS=1 )); 
            then
              cd ~/project/backend
              npm install
              #Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              #exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend 
             npm install
             npm run build
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0    
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here
 
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0    
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical      
      # Checkout code from git
      # Restore from cache
      # Your job code here
 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --region ${AWS_DEFAULT_REGION} \
            --filters 'Name=tag:project,Values=udapeople-backend' \
            --query 'Reservations[*].Instances[0].PublicIpAddress' \
            --output text)
            echo "${BACKEND_IP}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            #Add to memstash and grab in the smoke test
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "${BACKEND_IP}" \
             https://api.memstash.io/values/backendurl
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["23:0d:df:e8:d5:27:f3:de:c8:4d:57:69:3d:41:c8:3f"]
      - attach_workspace:
          at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ls -al
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            #exit 1
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
#           # Your code here
#           exit 1
#    # Here's where you will add some code to rollback on failure  
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update npm
            # your code here      
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # your code here
      # Here's where you will add some code to rollback on failure     
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#                   
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [23:0d:df:e8:d5:27:f3:de:c8:4d:57:69:3d:41:c8:3f]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y ansible
            sudo apt install -y awscli
            #apk add tar
            #apk add gzip
            #apk add --update ansible nodejs npm gzip curl tar
            #pip install awscli
            # your code here
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            #cd ../
            #zip -r backend.zip backend/
            #cat .circleci/ansible/inventory.txt
            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
  smoke-test:
    docker:
      - image: circleci/node:13.8.0 # python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt update 
            sudo apt install -y awscli 
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |            
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/backendurl > backend-url.txt
      - run:
          name: Backend smoke test.
          command: |            
            BACKEND_IP=$(cat backend-url.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y curl
            # your code here
      - run:
          name: Get OldWorkflowID
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: $OldWorkflowID
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
      - run:
          name: Update cloudfront distribution
          command: |      
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            #echo OldWorkflowID: $OldWorkflowID
            echo Current Workdlow ID:"${CIRCLE_WORKFLOW_ID:0:7}"
            # your code here
      # Here's where you will add some code to rollback on failure  
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
 
  cleanup:
    docker:
      - image: amazon/aws-cli
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}" 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              echo "_______________Stacks are being deleted________________"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "________________Cannot Cleanup__________________________"
            fi
            

workflows:
  default:
    jobs:
      - cloudfront-update
      - cleanup:
          requires: [cloudfront-update]
